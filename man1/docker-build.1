.TH "DOCKER" "1" "APRIL 2014" "Docker User Manuals" ""
.SH NAME
.PP
docker\-build \- Build a container image from a Dockerfile source at
PATH
.SH SYNOPSIS
.PP
\f[B]docker build\f[] [\f[B]\-\-no\-cache\f[][=\f[I]false\f[]]
[\f[B]\-q\f[]|\f[B]\-\-quiet\f[][=\f[I]false\f[]] [\f[B]\-rm\f[]]
[\f[B]\-t\f[]|\f[B]\-\-tag\f[]=\f[I]tag\f[]] PATH | URL | \-
.SH DESCRIPTION
.PP
This will read the Dockerfile from the directory specified in
\f[B]PATH\f[].
It also sends any other files and directories found in the current
directory to the Docker daemon.
The contents of this directory would be used by \f[B]ADD\f[] commands
found within the Dockerfile.
Warning, this will send a lot of data to the Docker daemon if the
current directory contains a lot of data.
.PP
If the absolute path is provided instead of â€˜.', only the files and
directories required by the \f[B]ADD\f[] command from the Dockerfile
will be added to the context and transferred to the Docker daemon.
.PP
When a single Dockerfile is given as URL, then no context is set.
When a Git repository is set as \f[B]URL\f[], the repository is used as
context.
.SH OPTIONS
.PP
\f[B]\-q\f[], \f[B]\-\-quiet\f[]=\f[I]true\f[]|\f[I]false\f[] : When set
to true, suppress verbose build output.
Default is \f[I]false\f[].
.PP
\f[B]\-\-rm\f[]=\f[I]true\f[]|\f[I]false\f[] : When true, remove
intermediate containers that are created during the build process.
The default is true.
.PP
\f[B]\-t\f[], \f[B]\-\-tag\f[]=\f[I]tag\f[] : Tag to be applied to the
resulting image on successful completion of the build.
.PP
\f[B]\-\-no\-cache\f[]=\f[I]true\f[]|\f[I]false\f[] : When set to true,
do not use a cache when building the image.
The default is \f[I]false\f[].
.SH EXAMPLES
.SS Building an image from current directory
.PP
Using a Dockerfile, Docker images are built using the build command:
.IP
.nf
\f[C]
docker\ build\ .
\f[]
.fi
.PP
If, for some reason, you do not what to remove the intermediate
containers created during the build you must set \-\-rm=false:
.IP
.nf
\f[C]
docker\ build\ \-\-rm=false\ .
\f[]
.fi
.PP
A good practice is to make a sub\-directory with a related name and
create the Dockerfile in that directory.
E.g.
a directory called mongo may contain a Dockerfile for a MongoDB image,
or a directory called httpd may contain a Dockerfile for an Apache web
server.
.PP
It is also good practice to add the files required for the image to the
sub\-directory.
These files will be then specified with the \f[C]ADD\f[] instruction in
the Dockerfile.
Note: if you include a tar file, which is good practice, then Docker
will automatically extract the contents of the tar file specified in the
\f[C]ADD\f[] instruction into the specified target.
.SS Building an image using a URL
.PP
This will clone the Github repository and use it as context.
The Dockerfile at the root of the repository is used as Dockerfile.
This only works if the Github repository is a dedicated repository.
.IP
.nf
\f[C]
docker\ build\ github.com/scollier/Fedora\-Dockerfiles/tree/master/apache
\f[]
.fi
.PP
Note that you can specify an arbitrary Git repository by using the
\f[C]git://\f[] schema.
.SH HISTORY
.PP
March 2014, Originally compiled by William Henry (whenry at redhat dot
com) based on docker.io source material and internal work.
.SH AUTHORS
William Henry.
