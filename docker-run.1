.\" Process this file with
.\" nroff -man -Tascii docker-run.1
.\"
.TH "DOCKER" "1" "MARCH 2014" "0.1" "Docker"
.SH NAME
docker-run \- Run a process in an isolated container
.SH SYNOPSIS
.B docker run 
[\fB-a\fR|\fB--attach\fR[=]] [\fB-c\fR|\fB--cpu-shares\fR[=0] [\fB-m\fR|\fB--memory\fR=\fImemory-limit\fR]
[\fB--cidfile\fR=\fIfile\fR] [\fB-d\fR|\fB--detach\fR[=\fIfalse\fR]] [\fB--dns\fR=\fIIP-address\fR]
[\fB--name\fR=\fIname\fR] [\fB-u\fR|\fB--user\fR=\fIusername\fR|\fIuid\fR]
[\fB--link\fR=\fIname\fR:\fIalias\fR] 
[\fB-e\fR|\fB--env\fR=\fIenvironment\fR] [\fB--entrypoint\fR=\fIcommand\fR] 
[\fB--expose\fR=\fIport\fR] [\fB-P\fR|\fB--publish-all\fR[=\fIfalse\fR]]
[\fB-p\fR|\fB--publish\fR=\fIport-mappping\fR] [\fB-h\fR|\fB--hostname\fR=\fIhostname\fR]
[\fB--rm\fR[=\fIfalse\fR]] [\fB--priviledged\fR[=\fIfalse\fR]
[\fB-i\fR|\fB--interactive\fR[=\fIfalse\fR] 
[\fB-t\fR|\fB--tty\fR[=\fIfalse\fR]] [\fB--lxc-conf\fR=\fIoptions\fR]
[\fB-n\fR|\fB--networking\fR[=\fItrue\fR]]
[\fB-v\fR|\fB--volume\fR=\fIvolume\fR] [\fB--volumes-from\fR=\fIcontainer-id\fR]
[\fB-w\fR|\fB--workdir\fR=\fIdirectory\fR] [\fB--sig-proxy\fR[=\fItrue\fR]]
IMAGE [COMMAND] [ARG...]
.SH DESCRIPTION
Run a process in a new container. \fBdocker run\fR starts a process with its own file system, its own networking, and its own isolated process tree. The \fIIMAGE\fR which starts the process may define defaults related to the process that will be run in the container, the networking to expose, and more, but \fBdocker run\fR gives final control to the operator or administrator who starts the container from the image. For that reason \fBdocker run\fR has more options than any other docker command.

If the \fIIMAGE\fR is not already loaded then \fBdocker run\fR will pull the \fBIMAGE\fR, and all image dependencies, from the repository in the same way running \fBdocker pull\fR \fIIMAGE\fR, before it starts the container from that image.


.B  -a, --attach=\fIstdin\fR|\fIstdout\fR|\fIstderr\fR: 
Attach to stdin, stdout or stderr. In foreground mode (the default when -d is not specified), \fBdocker run\fR can start the process in the container and attach the console to the process’s standard input, output, and standard error. It can even pretend to be a TTY (this is what most commandline executables expect) and pass along signals. The \fB-a\fR option can be set for each of stdin, stdout, and stderr.  

.B  -c, --cpu-shares=0: 
CPU shares in relative weight.  You can increase the priority of a container with the -c option. By default, all containers run at the same priority and get the same proportion of CPU cycles, but you can tell the kernel to give more shares of CPU time to one or more containers when you start them via \fBdocker run\fR.

.B -m, --memory=\fImemory-limit\fR: 
Allows you to constrain the memory available to a container. If the host supports swap memory, then the -m memory setting can be larger than physical RAM. The memory limit format: <number><optional unit>, where unit = b, k, m or g.

.B --cidfile=\fIfile\fR: 
Write the container ID to the file specified.

.B  -d, --detach=\fIfalse\fR: 
Detached mode. This runs the container running in the background. It prints the new container's id and nothing else. At any time you can run \fBdocker ps\fR in the other shell to view a list of the running containers. You can reattach to a detached container with \fBdocker attach\fR. If you choose to run a container in the detached mode, then you cannot use the -rm option.

.B --dns=\fIIP-address\fR: 
Set custom dns servers. This option can be used to override the dns configuration passed to the container. Typically this is necessary when the host dns configuration is invalid for the container (eg. 127.0.0.1). When this is the case the \fB-dns\fR flags is necessary for every run.

.B  -e, --env=\fIenvironment\fR: 
Set environment variables. This option allows you to specify arbitrary environment variables that are available for the process that will be launched inside of the container. 

.B --entrypoint=\ficommand\fR: 
This option allows you to overwrite the default entrypoint of the image that is set in the Dockerfile. The ENTRYPOINT of an image is similar to a COMMAND because it specifies what executable to run when the container starts, but it is (purposely) more difficult to override. The ENTRYPOINT gives a container its default nature or behavior, so that when you set an ENTRYPOINT you can run the container as if it were that binary, complete with default options, and you can pass in more options via the COMMAND. But, sometimes an operator may want to run something else inside the container, so you can override the default ENTRYPOINT at runtime by using a \fB--entrypoint\fR and a string to specify the new ENTRYPOINT. 

.B --expose=\fIport\fR: 
Expose a port from the container without publishing it to your host. A containers port can be exposed toother containers in three ways: 1) The developer can expose the port using the EXPOSE parameter of the Dockerfile, 2) the operator can use the \fB--expose\fR option with \dBdocker run\fR, or 3) the container can be started with the \fB--link\fR.

.B  -P, --publish-all=\fItrue\fR|\fIfalse\fR: 
When set to true publish all exposed ports to the host interfaces. The default is false. If the operator uses -P (or -p) then Docker will make the exposed port accessible on the host and the ports will be available to any client that can reach the host. To find the map between the host ports and the exposed ports, use \fBdocker port\fR. 

.B -p, --publish=[]: 
Publish a container's port to the host (format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort) (use 'docker port' to see the actual mapping)

.B -h , --hostname=\fIhostname\fR: 
Set's the container host name that is available inside the container.
  
.B -i , --interactive=\fItrue\fR|\fIfalse\fR: 
When set to true, keep stdin open even if not attached. The default is false.

.B --link=\fIname\fR:\fIalias\fR: 
Add link to another container. The format is name:alias. If the operator uses \fB--link\fR when starting the new client container, then the client container can access the exposed port via a private networking interface. Docker will set some environment variables in the client container to help indicate which interface and port to use. 

.B --lxc-conf=[]: 
Add custom lxc options -lxc-conf="lxc.cgroup.cpuset.cpus = 0,1"

.B -n, --networking=\fItrue\fR|\fIfalse\fR: 
When set to true, enable networking for this container. The default is true. 

.B  --name=\fIname\fR: 
Assign a name to the container. The operator can identify a container in three ways:
.sp
.nf
UUID long identifier (“f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778”)
UUID short identifier (“f78375b1c487”)
Name (“evil_ptolemy”)
.fi
.sp
The UUID identifiers come from the Docker daemon, and if you do not assign a name to the container with \fB--name\fR then the daemon will also generate a random string name too. The name is useful when defining links (see \fB--link\fR) (or any other place you need to identify a container). This works for both background and foreground Docker containers.

.B --privileged=\fItrue\fR|\fIfalse\fR: 
Give extended privileges to this container. By default, Docker containers are “unprivileged” (=false) and cannot, for example, run a Docker daemon inside the Docker container. This is because by default a container is not allowed to access any devices. A “privileged” container is given access to all devices.

When the operator executes \fbdocker run -privileged\fR, Docker will enable access to all devices on the host as well as set some configuration in AppArmor (\fB???\fR) to allow the container nearly all the same access to the host as processes running outside of a container on the host.

.B --rm=\fItrue\fR|\fIfalse\fR: 
If set to \fItrue\fR the container is automatically removed when it exits. The default is \fIfalse\fR. This option is incompatible with \fB-d\fR.

.B --sig-proxy=true: 
Proxify all received signal to the process (even in non-tty mode)
  
.B -t, --tty=false: 
Allocate a pseudo-tty

.B -u, --user=\fIusername\fR,\fRuid\fR: 
Username or UID

.B -v, --volume=[]: 
Bind mount a volume (e.g. from the host: -v /host:/container, from docker: -v /container)

.B --volumes-from=\fIcontainer-id\fR: 
Mount volumes from the specified container with container-id.

.B -w, --workdir=\fIdirectory\fR: 
Working directory inside the container

.SH EXAMPLES

If you do not specify -a then Docker will attach everything (stdin,stdout,stderr). You can specify to which of the three standard streams (stdin, stdout, stderr) you’d like to connect instead, as in:
.sp
.RS
docker run -a stdin -a stdout -i -t fedora /bin/bash
.RE
.sp
